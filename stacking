import streamlit as st
import pandas as pd
import numpy as np
from xgboost import XGBRegressor
from sklearn.ensemble import GradientBoostingRegressor, StackingRegressor, BaggingRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error, r2_score, mean_squared_error
from sklearn.model_selection import learning_curve, GridSearchCV
import matplotlib.pyplot as plt
from scipy.stats import skew, kurtosis, probplot
from sklearn.linear_model import LinearRegression
import requests
from io import StringIO

# Streamlit app title
st.title("Total Knee Size Predictor")

# Dictionary for femur sizes
femur_sizes = {
    1: (55.6, 59),
    2: (58.3, 62),
    3: (60.8, 65),
    4: (63.8, 68),
    5: (66.4, 71),
    6: (69.3, 74),
    7: (72.2, 77),
    8: (75.3, 80)
}

@st.cache_data(show_spinner=False)
def load_data_from_url(url):
    response = requests.get(url)
    response.raise_for_status()
    data = pd.read_csv(StringIO(response.text))
    data.columns = data.columns.str.strip().str.lower()  # Ensure columns are in lower case without spaces
    data['age_height_interaction'] = data['age'] * data['height']
    data['height_log'] = np.log1p(data['height'])
    return data

@st.cache_data(show_spinner=False)
def train_and_scale_models(data, features):
    X = data[features].values
    y_tibia = data['tibia used'].values
    y_femur = data['femur used'].values

    scaler_tibia = StandardScaler().fit(X)
    X_scaled_tibia = scaler_tibia.transform(X)
    scaler_femur = StandardScaler().fit(X)
    X_scaled_femur = scaler_femur.transform(X)

    # Hyperparameter tuning for XGBRegressor and GradientBoostingRegressor
    param_grid_xgb = {
        'n_estimators': [50, 100, 200],
        'max_depth': [3, 5, 7],
        'learning_rate': [0.01, 0.1, 0.2],
        'reg_alpha': [0.0, 0.1, 0.5],
        'reg_lambda': [0.0, 0.1, 0.5]
    }

    param_grid_gbr = {
        'n_estimators': [50, 100, 200],
        'max_depth': [3, 5, 7],
        'learning_rate': [0.01, 0.1, 0.2]
    }

    xgb_tibia = GridSearchCV(XGBRegressor(random_state=1), param_grid_xgb, cv=5, scoring='neg_mean_squared_error')
    xgb_femur = GridSearchCV(XGBRegressor(random_state=1), param_grid_xgb, cv=5, scoring='neg_mean_squared_error')

    gbr_tibia = GridSearchCV(GradientBoostingRegressor(random_state=1), param_grid_gbr, cv=5, scoring='neg_mean_squared_error')
    gbr_femur = GridSearchCV(GradientBoostingRegressor(random_state=1), param_grid_gbr, cv=5, scoring='neg_mean_squared_error')

    xgb_tibia.fit(X_scaled_tibia, y_tibia)
    xgb_femur.fit(X_scaled_femur, y_femur)
    gbr_tibia.fit(X_scaled_tibia, y_tibia)
    gbr_femur.fit(X_scaled_femur, y_femur)

    return {
        'tibia': {'xgb': xgb_tibia.best_estimator_, 'gbr': gbr_tibia.best_estimator_, 'scaler': scaler_tibia},
        'femur': {'xgb': xgb_femur.best_estimator_, 'gbr': gbr_femur.best_estimator_, 'scaler': scaler_femur}
    }

class TibiaFemurPredictor:
    def __init__(self):
        self.models = None
        self.data = None
        self.prediction_df = None
        self.learning_curve_fig = None
        self.residuals_hist_fig = None
        self.qq_plot_fig = None
        self.height_vs_pred_fig = None

    def train_models(self):
        self.models = train_and_scale_models(self.data, ['height_log', 'age_height_interaction', 'sex'])
        st.session_state['models'] = self.models
        st.success("Models trained and scalers initialized.")

    def plot_learning_curve(self, estimator, title, X, y, ax, color):
        train_sizes, train_scores, test_scores = learning_curve(estimator, X, y, cv=5, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 5))
        train_scores_mean = np.mean(train_scores, axis=1)
        test_scores_mean = np.mean(test_scores, axis=1)
        ax.plot(train_sizes, train_scores_mean, 'o-', color=color, label=f"Training score {title}")
        ax.plot(train_sizes, test_scores_mean, 'o-', color=color, label=f"Cross-validation score {title}")
        ax.set_title(title)
        ax.set_xlabel("Training examples")
        ax.set_ylabel("Score")
        ax.legend(loc="best")
        ax.grid()

    def plot_superimposed_learning_curves(self):
        X = self.data[['height_log', 'age_height_interaction', 'sex']].values
        y_tibia = self.data['tibia used'].values
        y_femur = self.data['femur used'].values

        fig, axes = plt.subplots(1, 2, figsize=(20, 8))
        self.plot_learning_curve(self.models['tibia']['xgb'], "Tibia XGB", X, y_tibia, axes[0], 'blue')
        self.plot_learning_curve(self.models['tibia']['gbr'], "Tibia GBR", X, y_tibia, axes[0], 'red')
        self.plot_learning_curve(self.models['femur']['xgb'], "Femur XGB", X, y_femur, axes[1], 'blue')
        self.plot_learning_curve(self.models['femur']['gbr'], "Femur GBR", X, y_femur, axes[1], 'red')

        self.learning_curve_fig = fig
        st.pyplot(fig)

    def combine_predictions(self, method='average'):
        X = self.data[['height_log', 'age_height_interaction', 'sex']].values
        y_tibia = self.data['tibia used'].values
        y_femur = self.data['femur used'].values

        X_scaled_tibia = self.models['tibia']['scaler'].transform(X)
        X_scaled_femur = self.models['femur']['scaler'].transform(X)

        tibia_preds_xgb = self.models['tibia']['xgb'].predict(X_scaled_tibia)
        tibia_preds_gbr = self.models['tibia']['gbr'].predict(X_scaled_tibia)
        femur_preds_xgb = self.models['femur']['xgb'].predict(X_scaled_femur)
        femur_preds_gbr = self.models['femur']['gbr'].predict(X_scaled_femur)

        if method == 'average':
            tibia_combined = (tibia_preds_xgb + tibia_preds_gbr) / 2
            femur_combined = (femur_preds_xgb + femur_preds_gbr) / 2
        elif method == 'weighted':
            weight_xgb = st.slider('Weight for XGB', 0.0, 1.0, 0.5)
            weight_gbr = 1 - weight_xgb
            tibia_combined = tibia_preds_xgb * weight_xgb + tibia_preds_gbr * weight_gbr
            femur_combined = femur_preds_xgb * weight_xgb + femur_preds_gbr * weight_gbr
        elif method == 'stacking':
            stacker_tibia = StackingRegressor(estimators=[
                ('xgb', self.models['tibia']['xgb']),
                ('gbr', self.models['tibia']['gbr'])
            ], final_estimator=LinearRegression())
            stacker_femur = StackingRegressor(estimators=[
                ('xgb', self.models['femur']['xgb']),
                ('gbr', self.models['femur']['gbr'])
            ], final_estimator=LinearRegression())
            stacker_tibia.fit(X_scaled_tibia, y_tibia)
            stacker_femur.fit(X_scaled_femur, y_femur)
            tibia_combined = stacker_tibia.predict(X_scaled_tibia)
            femur_combined = stacker_femur.predict(X_scaled_femur)
        elif method == 'bagging':
            bagger_tibia = BaggingRegressor(base_estimator=GradientBoostingRegressor(), n_estimators=10, random_state=1)
            bagger_femur = BaggingRegressor(base_estimator=GradientBoostingRegressor(), n_estimators=10, random_state=1)
            bagger_tibia.fit(X_scaled_tibia, y_tibia)
            bagger_femur.fit(X_scaled_femur, y_femur)
            tibia_combined = bagger_tibia.predict(X_scaled_tibia)
            femur_combined = bagger_femur.predict(X_scaled_femur)

        return tibia_combined, femur_combined

    def evaluate_models(self, combination_method='average'):
        features = ['height_log', 'age_height_interaction', 'sex']
        X = self.data[features].values
        y_tibia = self.data['tibia used'].values
        y_femur = self.data['femur used'].values

        X_scaled_tibia = self.models['tibia']['scaler'].transform(X)
        X_scaled_femur = self.models['femur']['scaler'].transform(X)

        tibia_combined, femur_combined = self.combine_predictions(method=combination_method)

        metrics = {
            'Model': ['XGB', 'GBR', combination_method.capitalize()],
            'R2 Score': [
                r2_score(y_tibia, self.models['tibia']['xgb'].predict(X_scaled_tibia)),
                r2_score(y_tibia, self.models['tibia']['gbr'].predict(X_scaled_tibia)),
                r2_score(y_tibia, tibia_combined)
            ],
            'Adjusted R2 Score': [
                1 - (1 - r2_score(y_tibia, self.models['tibia']['xgb'].predict(X_scaled_tibia))) * (len(y_tibia) - 1) / (len(y_tibia) - X.shape[1] - 1),
                1 - (1 - r2_score(y_tibia, self.models['tibia']['gbr'].predict(X_scaled_tibia))) * (len(y_tibia) - 1) / (len(y_tibia) - X.shape[1] - 1),
                1 - (1 - r2_score(y_tibia, tibia_combined)) * (len(y_tibia) - 1) / (len(y_tibia) - X.shape[1] - 1)
            ],
            'MAE': [
                mean_absolute_error(y_tibia, self.models['tibia']['xgb'].predict(X_scaled_tibia)),
                mean_absolute_error(y_tibia, self.models['tibia']['gbr'].predict(X_scaled_tibia)),
                mean_absolute_error(y_tibia, tibia_combined)
            ],
            'MAPE': [
                np.mean(np.abs((y_tibia - self.models['tibia']['xgb'].predict(X_scaled_tibia)) / y_tibia)) * 100,
                np.mean(np.abs((y_tibia - self.models['tibia']['gbr'].predict(X_scaled_tibia)) / y_tibia)) * 100,
                np.mean(np.abs((y_tibia - tibia_combined) / y_tibia)) * 100
            ],
            'Skewness': [
                skew(y_tibia - self.models['tibia']['xgb'].predict(X_scaled_tibia)),
                skew(y_tibia - self.models['tibia']['gbr'].predict(X_scaled_tibia)),
                skew(y_tibia - tibia_combined)
            ],
            'Kurtosis': [
                kurtosis(y_tibia - self.models['tibia']['xgb'].predict(X_scaled_tibia)),
                kurtosis(y_tibia - self.models['tibia']['gbr'].predict(X_scaled_tibia)),
                kurtosis(y_tibia - tibia_combined)
            ]
        }

        metrics_df = pd.DataFrame(metrics)
        st.table(metrics_df.applymap(lambda x: round(x, 1)))

        fig, axes = plt.subplots(2, 2, figsize=(12, 8))
        for i, (bone, ax) in enumerate(zip(['tibia', 'femur'], axes.flatten())):
            for j, model_type in enumerate(['xgb', 'gbr']):
                residuals = self.data[f'{bone} used'].values - self.models[bone][model_type].predict(self.models[bone]['scaler'].transform(self.data[features].values))
                ax.hist(residuals, bins=20, alpha=0.5, label=f'{bone.capitalize()} {model_type.upper()}')
                ax.set_title(f'{bone.capitalize()} Residuals Histogram')
                ax.legend()

            if combination_method == 'average':
                combined_preds = (self.models[bone]['xgb'].predict(self.models[bone]['scaler'].transform(self.data[features].values)) + 
                                  self.models[bone]['gbr'].predict(self.models[bone]['scaler'].transform(self.data[features].values))) / 2
            elif combination_method == 'weighted':
                weight_xgb = st.slider('Weight for XGB', 0.0, 1.0, 0.5)
                weight_gbr = 1 - weight_xgb
                combined_preds = self.models[bone]['xgb'].predict(self.models[bone]['scaler'].transform(self.data[features].values)) * weight_xgb + \
                                 self.models[bone]['gbr'].predict(self.models[bone]['scaler'].transform(self.data[features].values)) * weight_gbr
            elif combination_method == 'stacking':
                stacker = StackingRegressor(estimators=[
                    ('xgb', self.models[bone]['xgb']),
                    ('gbr', self.models[bone]['gbr'])
                ], final_estimator=LinearRegression())
                stacker.fit(self.models[bone]['scaler'].transform(self.data[features].values), self.data[f'{bone} used'].values)
                combined_preds = stacker.predict(self.models[bone]['scaler'].transform(self.data[features].values))
            elif combination_method == 'bagging':
                bagger = BaggingRegressor(base_estimator=GradientBoostingRegressor(), n_estimators=10, random_state=1)
                bagger.fit(self.models[bone]['scaler'].transform(self.data[features].values), self.data[f'{bone} used'].values)
                combined_preds = bagger.predict(self.models[bone]['scaler'].transform(self.data[features].values))

            residuals = self.data[f'{bone} used'].values - combined_preds
            ax.hist(residuals, bins=20, alpha=0.5, label=f'{bone.capitalize()} {combination_method.capitalize()}')
            ax.set_title(f'{bone.capitalize()} Residuals Histogram')
            ax.legend()

        self.residuals_hist_fig = fig
        st.pyplot(fig)

    def plot_qq_plots(self):
        features = ['height_log', 'age_height_interaction', 'sex']
        X_tibia = self.data[features].values
        y_tibia = self.data['tibia used'].values
        X_femur = self.data[features].values
        y_femur = self.data['femur used'].values

        fig, axes = plt.subplots(2, 2, figsize=(12, 8))
        fig.suptitle('XGB QQ Plots')

        for i, (bone, ax) in enumerate(zip(['tibia', 'femur'], axes.flatten())):
            residuals = self.data[f'{bone} used'] - self.models[bone]['xgb'].predict(self.models[bone]['scaler'].transform(self.data[features].values))
            residuals = np.round(residuals, 1)
            probplot(residuals, dist="norm", plot=ax)
            ax.set_title(f'{bone.capitalize()} XGB QQ Plot')

        st.pyplot(fig)

        fig, axes = plt.subplots(2, 2, figsize=(12, 8))
        fig.suptitle('GBR QQ Plots')

        for i, (bone, ax) in enumerate(zip(['tibia', 'femur'], axes.flatten())):
            residuals = self.data[f'{bone} used'] - self.models[bone]['gbr'].predict(self.models[bone]['scaler'].transform(self.data[features].values))
            residuals = np.round(residuals, 1)
            probplot(residuals, dist="norm", plot=ax)
            ax.set_title(f'{bone.capitalize()} GBR QQ Plot')

        self.qq_plot_fig = fig
        st.pyplot(fig)

    def fit_regression_line(self, sex_val, age):
        heights = np.linspace(60, 76, 100)
        femur_pred_xgb = []
        femur_pred_gbr = []

        for height in heights:
            X_new = np.array([[np.log1p(height), age * height, sex_val]])
            X_new_scaled_femur = self.models['femur']['scaler'].transform(X_new)

            femur_pred_xgb.append(self.models['femur']['xgb'].predict(X_new_scaled_femur)[0])
            femur_pred_gbr.append(self.models['femur']['gbr'].predict(X_new_scaled_femur)[0])

        model_type = st.selectbox("Select Model for Regression Line:", ["xgb", "gbr"])
        if model_type == "xgb":
            femur_preds = femur_pred_xgb
        else:
            femur_preds = femur_pred_gbr

        femur_reg = LinearRegression().fit(heights.reshape(-1, 1), femur_preds)
        femur_reg_preds = femur_reg.predict(heights.reshape(-1, 1))

        femur_mae = mean_absolute_error(femur_preds, femur_reg_preds)

        st.write(f"Femur {model_type.upper()} MAE (Regression Line): {femur_mae:.4f}")

        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(heights, femur_preds, 'o', label=f'Femur {model_type.upper()} Predictions', color='blue')
        ax.plot(heights, femur_reg_preds, '-', label=f'Femur {model_type.upper()} Regression Line', color='blue')

        ax.set_xlabel('Height (inches)')
        ax.set_ylabel('Femur Size')
        ax.set_title(f'Regression Line Fit to Femur Size Predictions ({model_type.upper()})')
        ax.legend()
        st.pyplot(fig)

    def predict(self, age, height, sex_val):
        if not self.models:
            st.error("Models are not trained yet.")
            return

        X_new = np.array([[np.log1p(height), age * height, sex_val]])
        tibia_scaler = self.models['tibia']['scaler']
        femur_scaler = self.models['femur']['scaler']
        X_new_scaled_tibia = tibia_scaler.transform(X_new)
        X_new_scaled_femur = femur_scaler.transform(X_new)

        tibia_preds_xgb = self.models['tibia']['xgb'].predict(X_new_scaled_tibia)
        tibia_preds_gbr = self.models['tibia']['gbr'].predict(X_new_scaled_tibia)
        femur_preds_xgb = self.models['femur']['xgb'].predict(X_new_scaled_femur)
        femur_preds_gbr = self.models['femur']['gbr'].predict(X_new_scaled_femur)

        # Round predictions to 1 decimal point
        tibia_preds_xgb = round(tibia_preds_xgb[0], 1)
        tibia_preds_gbr = round(tibia_preds_gbr[0], 1)
        femur_preds_xgb = round(femur_preds_xgb[0], 1)
        femur_preds_gbr = round(femur_preds_gbr[0], 1)

        prediction_data = {
            "Model": ["XGB", "GBR"],
            "Predicted Femur": [femur_preds_xgb, femur_preds_gbr],
            "Predicted Tibia": [tibia_preds_xgb, tibia_preds_gbr]
        }

        prediction_df = pd.DataFrame(prediction_data)

        st.table(prediction_df)

        avg_femur_pred = round(np.mean([femur_preds_xgb, femur_preds_gbr]), 1)
        femur_df = pd.DataFrame(femur_sizes).T
        femur_df.columns = ["A", "B"]
        femur_df.index.name = "Size"
        femur_df.index = femur_df.index.astype(int)
        femur_df = femur_df.reset_index()

        def highlight_size_row(s):
            return ['background-color: yellow' if s['Size'] == avg_femur_pred else '' for _ in s.index]

        st.table(femur_df.style.apply(highlight_size_row, axis=1).format("{:.1f}", subset=["A", "B"]))

def main():
    predictor = TibiaFemurPredictor()

    # Dictionary of available CSV files and their URLs
    csv_files = {
        "Data Central Florida": "https://raw.githubusercontent.com/Msmbusiness/Knee/main/data%20central%20florida.csv",
        "Data Midwest": "https://raw.githubusercontent.com/Msmbusiness/Knee/main/data%20midwest.csv"
    }

    default_file = "Data Central Florida"
    selected_file = st.selectbox("Select a CSV file", list(csv_files.keys()), index=list(csv_files.keys()).index(default_file))
    if selected_file:
        file_url = csv_files[selected_file]
        predictor.data = load_data_from_url(file_url)
        st.success(f"Data file '{selected_file}' loaded successfully.")

        if st.button("Train Models"):
            predictor.train_models()

        if 'models' in st.session_state:
            predictor.models = st.session_state['models']
            age = st.slider("Age:", min_value=55, max_value=85, value=65)
            height = st.slider("Height (inches):", min_value=59, max_value=75, value=65)
            sex = st.selectbox("Sex:", ["Male", "Female"])
            sex_val = 1 if sex == "Male" else 0

            if st.button("Predict"):
                predictor.predict(age, height, sex_val)

            if st.checkbox("Plot Height vs Bone Size (Males and Females)"):
                predictor.plot_height_vs_bone_size()

            if st.checkbox("Plot Difference (Femur Used - Tibia Used) (Males Only)"):
                predictor.plot_odds_ratio()

            if st.checkbox("Training CV Validation Plots"):
                predictor.plot_superimposed_learning_curves()

            combination_method = st.selectbox("Select Combination Method:", ["average", "weighted", "stacking", "bagging"])
            if st.checkbox("Evaluate Models"):
                predictor.evaluate_models(combination_method=combination_method)

            if st.checkbox("Plot QQ Plots"):
                predictor.plot_qq_plots()

            if st.checkbox("Fit Models with Regression Line"):
                predictor.fit_regression_line(sex_val, age)

    st.write("""
        **Disclaimer:** This application is for educational purposes only. It is not intended to diagnose, provide medical advice, or offer recommendations. The predictions made by this application are not validated and should be used for research purposes only.
    """)

if __name__ == "__main__":
    main()
